/*
Copyright (c) 2016, Peter Dornbach
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name BrickMesh nor the names of its contributors may be used
      to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
syntax="proto2";

package com.brickmesh.proto;

message Color {
  // The ids of the color. It must have at least one id and may have
  // an arbitrary number of ids. No two colors are allowed to have the
  // same id.
  repeated string id = 1;
  
  // Human-readable name of the color.
  optional string name = 2;
}

message ColorModel {
  // All the known colors in the model.
  repeated Color color = 1;
}

message Part {
  // The ids of the part. Like with colors, it must have at least one id
  // and may have an abitrary number of ids. No two parts are allowed to
  // have the same id.
  //
  // The permitted namespaces for ids are:
  // b:  - id only valid on BrickLink.
  // l:  - id only valid in LDD.
  // o:  - id that is attempted in non-BL and non-LDD context (for example LDraw.)
  // v:  - virtual id, not valid anywhere.
  //
  // Convenience expanded namespaces:
  // g:  - expands to b: l: o:
  // gb: - expands to b: o:
  // gl: - expands to l: o:
  //
  // There must not be any collisions between namespaces, for example when
  // exanded, "g:123" collides with "b:123"; these two must not coexist anywhere
  // in the model.
  repeated string id = 1;

  message Similar {
    // One of the ids of the similar part. This must be a non-expanded id.
    optional string id = 1;
    
    // Is confirmation needed to replace similar parts with each other.
    optional bool confirm = 2;
  }

  // Other existing parts that can be used as a replacement.
  // This must exist as a separate part with its own id.
  repeated Similar similar = 2;

  message Decor {
    // The id of the part with a decor.
    repeated string id = 1;
  }

  // Decor is syntactic sugar to simiplify the declaration of parts
  // with decor.
  //
  // part {
  //   id: "g:1"
  //   decor { id: "g:1b"}
  // }
  //
  // is equivalent to:
  //
  // part {
  //   id: "g:1"
  //   similar { id: "g:1b" confirm: BOTH }
  // }
  // part {
  //   id: "g:1b"
  // }
  repeated Decor decor = 3;

  message Item {
    // An id of the contained part.
    optional string id = 1;
    
    // The color of the contained part. If this is not set then it
    // inherits the color of this part.
    optional string color = 2;
    
    // How many of the contained parts are part of this one.
    // If omitted then 1.
    optional int32 count = 3;
  }
  
  // If this part is fully equivalent to some combination of other
  // parts, then they are listed here. Must be more than 1.
  repeated Item item = 4;
  
  // The weight of the part in grams. The model must be able to figure
  // out a weight for each part. If this is not set explicitly then it
  // tries the following rules:
  // 1. If this part has 'item' fields then it tries to compute it as
  //    a sum of those.
  // 2. If this part has similar parts then it tries to use the weight
  //    of those.
  optional double weight_grams = 6;
}

// All recognized parts, irrespective of color.
message PartModel {
  repeated Part part = 1;
}

// One part-color combinations that are actually available and
// can be bought.
message AvailablePart {
  optional string id = 1;

  message Color {
    optional string color = 1;
    optional int64 num_stores = 2;
    optional double used_price_usd = 3;
    optional double new_price_usd = 4;
  }
  repeated Color color = 2;
}

message AvailableParts {
  repeated AvailablePart part = 1;
}
